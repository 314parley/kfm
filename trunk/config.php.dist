<?php
# see license.txt for licensing
error_reporting(E_USER_ERROR | E_USER_WARNING | E_USER_NOTICE);
session_start();
{ # configuration - this section is for all users of KFM

	# where are the files located on the hard-drive, relative to the website's root directory?
	# In the default example, the user-files are at http://kfm.verens.com/sandbox/UserFiles/
	# Note that this is the actual file-system location of the files.
	$kfm_userfiles='/sandbox/UserFiles/';
	
	# what should be added to the server's root URL to find the URL of the user files?
	# Note that this is usually the same as $kfm_userfiles, but could be different in the case
	#   that the server uses mod_rewrite or personal web-sites, etc
	$kfm_userfiles_output='/sandbox/UserFiles/';
	
	# directory in which KFM keeps its database and generated files
	$kfm_workdirectory = '.files';

	# 1 = users are allowed to upload files
	# 0 = user are not allowed upload files
	$kfm_allow_file_uploads=1;

	# use this array to ban dangerous files from being uploaded.
	$kfm_banned_extensions=array('php','cfm','asp','cgi','pl');

	# this array tells KFM what extensions indicate files which may be edited online.
	$kfm_editable_extensions=array('css','html','js','txt','xhtml','xml');

	# this array tells KFM what extensions indicate files which may be viewed online.
	# the contents of $kfm_editable_extensions will be added automatically.
	$kfm_viewable_extensions=array('sql','php');

	# 0 = only errors will be logged
	# 1 = everything will be logged
	$kfm_log_level=0;

	# use this array to show the order in which language files will be checked for
	$kfm_preferred_languages=array('en','de','da','es','fr','nl','ga');

	# themes are located in ./themes/
	# to use a different theme, replace 'default' with the name of the theme's directory.
	$kfm_theme='default';

	# what happens if someone double-clicks a file or presses enter on one?
	$kfm_file_handler='download'; # values allowed: download, fckeditor

	# what type of database to use
	$kfm_db_type='mysql'; # values allowed: sqlite, mysql, pgsql

	# the following options should only be filled if you are not using sqlite
	$kfm_db_host='localhost';
	$kfm_db_name='kfm';
	$kfm_db_username='username';
	$kfm_db_password='password';

	define('ERROR_LOG_LEVEL',1); # 0=none, 1=errors, 2=1+warnings, 3=2+notices, 4=3+unknown
}

{ # API - for programmers only
	if(file_exists('api/config.php'))include('api/config.php');
}




# the rest of this is code meant for KFM developers only. if you're not a KFM developer, then stop reading now, and close your text editor.







function kfm_error_log($errno,$errstr,$errfile,$errline){
	if(!ERROR_LOG_LEVEL)return;
	$msg = false;
	switch ($errno) {
		case E_USER_ERROR:{
			if(ERROR_LOG_LEVEL>2)$msg='error|'.$errno.'|'.$errfile.'|'.$errline.'|'.$errstr."\n";
			break;
		}
		case E_USER_WARNING:{
			if(ERROR_LOG_LEVEL>1)$msg='warning|'.$errno.'|'.$errfile.'|'.$errline.'|'.$errstr."\n";
			break;
		}
		case E_USER_NOTICE:{
			if(ERROR_LOG_LEVEL)$msg='notice|'.$errno.'|'.$errfile.'|'.$errline.'|'.$errstr."\n";
			break;
		}
		default:{
			if(ERROR_LOG_LEVEL>3)$msg='unknown|'.$errno.'|'.$errfile.'|'.$errline.'|'.$errstr."\n";
			break;
		}
	}
	if($msg&&$handle=fopen(WORKPATH.'errors.log', 'a')){
		@fwrite($handle, date('Y-m-d H:i:s').' '.$msg."\n" );
		@fclose($handle);
	}
}
set_error_handler('kfm_error_log');
{ # variables
	define('KFM_VERSION', '0.7.1');
	$rootdir=str_replace('//','/',$_SERVER['DOCUMENT_ROOT'].$kfm_userfiles.'/');
	if(!file_exists($rootdir.$kfm_workdirectory))mkdir($rootdir.$kfm_workdirectory);
	if(!isset($_SESSION['kfm']))$_SESSION['kfm']=array(
		'currentdir'=>rtrim($rootdir,' /'),
		'cwd_id'=>1,
		'language'=>''
	);
	define('LSQUIGG','{');
	define('RSQUIGG','}');
	$kfm_highlight_extensions=array('php'=>'PHP', 'html'=>'HTML', 'xhtml'=>'HTML',
				 'sql'=>'MYSQL', 'js'=>'JAVASCRIPT', 'css'=>'CSS', 'xml'=>'XML');
	$kfm_banned_files = array('thumbs.db','.ds_store'); # lowercase array
}
{ # work directory
	$workpath = $rootdir.$kfm_workdirectory; // should be more at the top of this document
	$workurl = $kfm_userfiles_output.$kfm_workdirectory;
	$workdir = true;
	if(substr($workpath,-1)!='/') $workpath.='/';
	if(substr($workurl,-1)!='/') $workurl.='/';
	define('WORKPATH', $workpath);
	define('WORKURL', $workurl);
	if(is_dir($workpath)){
		if(!is_writable($workpath)) $workdir = false;
	}else{
		# Support for creating the directory
		$workpath_tmp = substr($workpath,0,-1);
		if(is_writable(dirname($workpath_tmp))){
			mkdir($workpath_tmp, 0755);
		}else{
			$workdir = false;
		}
	}
	if(!$workdir){
		# in the future kfm should be able to work without a working directory. Then less functions will be available
		# If that is the case, an error will be generated that there is limited functionality because there is no proper workdirectory
		# but that is for the future, now kfm will not run
		echo 'error: no writable workpath is specified'; # TODO: new string
		exit;
	}
}
{ # database
	$db_defined=0;
	switch($kfm_db_type){
		case 'mysql': {
			require_once('MDB2.php');
			$dsn='mysql://'.$kfm_db_username.':'.$kfm_db_password.'@'.$kfm_db_host.'/'.$kfm_db_name;
			$db=&MDB2::factory($dsn);
			if(PEAR::isError($db))die($db->getMessage());
			$db->setFetchMode(MDB2_FETCHMODE_ASSOC);
			$res=&$db->query('show tables');
			if(!$res->numRows())include('scripts/db.mysql.create.php');
			else $db_defined=1;
			break;
		}
		case 'pgsql': {
			require_once('MDB2.php');
			$dsn='pgsql://'.$kfm_db_username.':'.$kfm_db_password.'@'.$kfm_db_host.'/'.$kfm_db_name;
			$db=&MDB2::factory($dsn);
			if(PEAR::isError($db))die($db->getMessage());
			$db->setFetchMode(MDB2_FETCHMODE_ASSOC);
			$res=&$db->query("SELECT tablename from pg_tables where tableowner=current_user AND tablename NOT LIKE 'pg_%' AND tablename NOT LIKE 'sql_%'");
			if($res->numRows()<1)include('scripts/db.pgsql.create.php');
			else $db_defined=1;
			break;
		}
		case 'sqlite': {
			require_once('MDB2.php');
			$db_create = false;
			define('DBNAME',$kfm_db_name);
			if(!file_exists(WORKPATH.DBNAME))$db_create=true;
			$dsn=array('phptype'=>'sqlite','database'=>WORKPATH.DBNAME,'mode'=>'0644');
			$db=&MDB2::factory($dsn);
			if(PEAR::isError($db))die($db->getMessage());
			$db->setFetchMode(MDB2_FETCHMODE_ASSOC);
			if($db_create)include('scripts/db.sqlite.create.php');
			$db_defined=1;
			break;
		}
		default: {
			echo "unknown database type specified ($kfm_db_type)"; # TODO: new string
			exit;
		}
	}
	if(!$db_defined){
		echo 'failed to connect to database'; # TODO: new string
		exit;
	}
	$db_defined=null;
}
{ # get kfm parameters and check for updates
	$kfm_parameters=array();
	$q=$db->query('select * from parameters');
	$rs=$q->fetchAll();
	foreach($rs as $r)$kfm_parameters[$r['name']]=$r['value'];
	if($kfm_parameters['version']!=KFM_VERSION)require 'scripts/update.0.7.1.php';
}
{ # languages
	$kfm_language='';
	{ # find available languages
		if($handle=opendir('lang')){
			$files=array();
			while(false!==($file=readdir($handle)))if(is_file('lang/'.$file))$files[]=$file;
			closedir($handle);
			sort($files);
			$kfm_available_languages=array();
			foreach($files as $f)$kfm_available_languages[]=str_replace('.js','',$f);
		}
		else{
			echo 'error: missing language files';
			exit;
		}
	}
	{ # check for URL parameter "lang"
		if(isset($_GET['lang'])&&$_GET['lang']&&in_array($_GET['lang'],$kfm_available_languages)){
			$kfm_language=$_GET['lang'];
			$_SESSION['kfm']['language']=$kfm_language;
		}
	}
	{ # check session for language selected earlier
		if(
			$kfm_language==''&&
			isset($_SESSION['kfm']['language'])&&
			$_SESSION['kfm']['language']!=''&&
			in_array($_SESSION['kfm']['language'],$kfm_available_languages)
		)$kfm_language=$_SESSION['kfm']['language'];
	}
	{ # check the browser's http headers for preferred languages
		if($kfm_language==''){
			$langs=explode(',',$_SERVER['HTTP_ACCEPT_LANGUAGE']);
			foreach($langs as $lang)if(in_array($lang,$kfm_available_languages)){
				$kfm_language=$lang;
				break;
			}
		}
	}
	{ # check the kfm_preferred_languages
		if($kfm_language=='')foreach($kfm_preferred_languages as $lang)if(in_array($lang,$kfm_available_languages)){
			$kfm_language=$lang;
			break;
		}
	}
	{ # still no language chosen? use the first available one then
		if($kfm_language=='')$kfm_language=$kfm_available_languages[0];
	}
}
{ # make a few corrections to the config where necessary
	foreach($kfm_editable_extensions as $v)if(!in_array($v,$kfm_viewable_extensions))$kfm_viewable_extensions[]=$v;
}
{ # common functions
	function kfm_checkAddr($addr){
		return (
			strpos($addr,'..')===false&&
			!in_array(preg_replace('/.*\./','',$addr),$GLOBALS['kfm_banned_extensions'])
		);
	}
	if(!function_exists('mime_content_type')){
		function mime_content_type($f){
			# windows users, please install this first: http://gnuwin32.sourceforge.net/packages/file.htm
			return shell_exec(trim('file -bi '.escapeshellarg($f)));
		}
	}
}
?>
